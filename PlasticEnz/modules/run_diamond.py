import subprocessimport osimport loggingdef run_diamond(proteins, polymer, outdir, cores, evalue, min_score):    package_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))    db_dir = os.path.join(package_dir, "data", "polymer_seqs")        poly = polymer.strip().upper()    db_files = []    polymer_to_diamond = {         "PBSA": ["PBSA.dmnd"],         "PBS": ["PBS.dmnd"],         "PCL": ["PCL.dmnd"],         "PES": ["PES.dmnd"],         "PHBV": ["PHBV.dmnd"],         "PLA": ["PLA.dmnd"],         "PVA": ["PVA.dmnd"]         # (Add entries for PET/PHB if DIAMOND databases exist)    }    if poly in polymer_to_diamond:         for db in polymer_to_diamond[poly]:             db_path = os.path.join(db_dir, db)             if os.path.exists(db_path):                  db_files.append(db_path)    else:         print(f"WARNING: No supported DIAMOND database for polymer, so skipping DIAMOND alignemnts for {poly}.")         return []        os.makedirs(outdir, exist_ok=True)    output_files = []        for db_file in db_files:         db_base = os.path.splitext(os.path.basename(db_file))[0]         output_file = os.path.join(outdir, f"{poly}_DIAMOND.tsv")         log_file = os.path.join(outdir, "diamond.log")                  cmd = [             "diamond", "blastp",             "-d", db_file,             "-q", proteins,             "-o", output_file,             "--outfmt", "6",             "-e", str(evalue),             "--min-score", str(min_score),             "--threads", str(cores)         ]                  if os.path.exists(log_file):             os.remove(log_file)                  try:             with open(log_file, "a") as log:                 log.write(f"üß™Running command: {' '.join(cmd)}\n")                 subprocess.check_call(cmd, stdout=log, stderr=log)         except subprocess.CalledProcessError as e:             with open(log_file, "a") as log:                 log.write(f"‚ùåError running DIAMOND command: {e}\n")                  # Ensure the output file exists (even if empty)         if not os.path.exists(output_file):             print(f"Warning: DIAMOND output for polymer {poly} not created; creating empty file {output_file}.")             with open(output_file, "w") as f:                 f.write("# DIAMOND output - No hits found\n")                  output_files.append(output_file)        print(f"‚úÖDIAMOND completed successfully for polymer: {poly}.")    return output_files